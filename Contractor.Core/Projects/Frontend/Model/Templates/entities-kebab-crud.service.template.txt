import { Injectable } from '@angular/core';
import { BackendCoreService } from 'src/app/services/backend/backend-core.service';
import { IPagedResult } from 'src/app/services/backend/pagination/i-paged-result';
import { IPaginationOptions, toPaginationParams } from 'src/app/services/backend/pagination/i-pagination-options';
import { IEntityCreate } from './dtos/i-entity-kebab-create';
import { IEntityDetail } from './dtos/i-entity-kebab-detail';
import { IEntityListItem } from './dtos/i-entity-kebab-list-item';
import { IEntityUpdate } from './dtos/i-entity-kebab-update';

@Injectable()
export class EntitiesCrudService {

    constructor(private backendCoreService: BackendCoreService) { }

    public async getPagedEntities(paginationOptions: IPaginationOptions): Promise<IPagedResult<IEntityListItem>> {
        const url = '/api/domain-kebab/entities-kebab?' + toPaginationParams(paginationOptions);
        return await this.backendCoreService.get<IPagedResult<IEntityListItem>>(url);
    }

    public async getEntityDetail(entityId: string): Promise<IEntityDetail> {
        return await this.backendCoreService.get<IEntityDetail>('/api/domain-kebab/entities-kebab/' + entityId);
    }

    public async createEntity(entityCreate: IEntityCreate): Promise<string> {
        const options = {
            body: entityCreate
        };

        const result = await this.backendCoreService.post<{ data: string }>('/api/domain-kebab/entities-kebab', options);

        const newEntityId = result.data;
        return newEntityId;
    }

    public async updateEntity(entityUpdate: IEntityUpdate): Promise<void> {
        const options = {
            body: entityUpdate
        };

        await this.backendCoreService.put('/api/domain-kebab/entities-kebab', options);
    }

    public async deleteEntity(entityId: string): Promise<void> {
        await this.backendCoreService.delete('/api/domain-kebab/entities-kebab/' + entityId);
    }

}
