using Microsoft.Extensions.Logging;
using ProjectName.Contract.Logic.LogicResults;
using ProjectName.Contract.Logic.Model.Domain.Entities;
using ProjectName.Contract.Logic.Services.Identifier;
using ProjectName.Contract.Persistence.Model.Domain.Entities;
using ProjectName.Logic.LogicResults;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ProjectName.Logic.Model.Domain.Entities
{
    internal class EntitiesCrudLogic : IEntitiesCrudLogic
    {
        private readonly IEntitiesCrudRepository entitiesCrudRepository;

        private readonly IGuidGenerator guidGenerator;
        private readonly ILogger<EntitiesCrudLogic> logger;

        public EntitiesCrudLogic(
            IEntitiesCrudRepository entitiesCrudRepository,
            IGuidGenerator guidGenerator,
            ILogger<EntitiesCrudLogic> logger)
        {
            this.entitiesCrudRepository = entitiesCrudRepository;

            this.guidGenerator = guidGenerator;
            this.logger = logger;
        }

        public ILogicResult<Guid> CreateEntity(IEntityCreate entityCreate)
        {
            Guid newEntityId = this.guidGenerator.NewGuid();
            IDbEntity entityToCreate = Entity.CreateEntity(newEntityId, entityCreate);
            this.entitiesCrudRepository.CreateEntity(entityToCreate);

            this.logger.LogInformation("Entity ({entityId}) angelegt", newEntityId);
            return LogicResult<Guid>.Ok(entityToCreate.Id);
        }

        public ILogicResult DeleteEntity(Guid entityId)
        {
            if (!this.entitiesCrudRepository.DoesEntityExist(entityId))
            {
                this.logger.LogDebug("Entity konnte nicht gefunden werden.");
                return LogicResult.NotFound("Entity konnte nicht gefunden werden.");
            }

            // TODO: Relation Deletion
            this.entitiesCrudRepository.DeleteEntity(entityId);

            this.logger.LogInformation("Entity ({id}) gelöscht", entityId);
            return LogicResult.Ok();
        }

        public ILogicResult<IEntityDetail> GetEntityDetail(Guid entityId)
        {
            IDbEntityDetail dbEntityDetail = this.entitiesCrudRepository.GetEntityDetail(entityId);
            if (dbEntityDetail == null)
            {
                this.logger.LogDebug("Entity konnte nicht gefunden werden.");
                return LogicResult<IEntityDetail>.NotFound("Entity konnte nicht gefunden werden.");
            }

            this.logger.LogDebug("Details für Entity wurde geladen");
            return LogicResult<IEntityDetail>.Ok(EntityDetail.FromDbEntityDetail(dbEntityDetail));
        }

        public ILogicResult<IEnumerable<IEntity>> GetEntities()
        {
            IEnumerable<IEntity> entities = this.entitiesCrudRepository.GetEntities()
                .Select(entity => Entity.FromDbEntity(entity));

            this.logger.LogDebug("Entities wurden geladen");
            return entities;
        }

        public ILogicResult UpdateEntity(IEntityUpdate entityUpdate)
        {
            IDbEntity entity = this.entitiesCrudRepository.GetEntity(entityUpdate.Id);
            if (entity == null)
            {
                this.logger.LogDebug("Entity konnte nicht gefunden werden.");
                return LogicResult.NotFound("Entity konnte nicht gefunden werden.");
            }

            Entity.UpdateDbEntity(entity, entityUpdate);

            this.entitiesCrudRepository.UpdateEntity(entity);

            this.logger.LogInformation("Entity ({id}) aktualisiert", entityUpdate.Id);
            return LogicResult.Ok();
        }
    }
}