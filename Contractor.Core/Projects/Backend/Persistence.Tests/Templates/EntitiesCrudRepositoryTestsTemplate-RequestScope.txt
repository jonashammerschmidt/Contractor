using ProjectName.Contract.Contexts;
using ProjectName.Contract.Persistence.Modules.Domain.Entities;
using ProjectName.Persistence.Modules.Domain.Entities;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System.Linq;

namespace ProjectName.Persistence.Tests.Modules.Domain.Entities
{
    [TestClass]
    public class EntitiesCrudRepositoryTests
    {
        [TestMethod]
        public void CreateEntityTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryEmpty();

            // Act
            entitiesCrudRepository.CreateEntity(DbEntityTest.ForCreate());

            // Assert
            IDbEntity dbEntity = entitiesCrudRepository.GetEntity(EntityTestValues.IdForCreate);
            DbEntityTest.AssertForCreate(dbEntity);
        }

        [TestMethod]
        public void DeleteEntityTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryDefault();

            // Act
            entitiesCrudRepository.DeleteEntity(EntityTestValues.IdDbDefault);

            // Assert
            bool doesEntityExist = entitiesCrudRepository.DoesEntityExist(EntityTestValues.IdDbDefault);
            Assert.IsFalse(doesEntityExist);
        }

        [TestMethod]
        public void DoesEntityExistFalseTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryEmpty();

            // Act
            bool doesEntityExist = entitiesCrudRepository.DoesEntityExist(EntityTestValues.IdDbDefault);

            // Assert
            Assert.IsFalse(doesEntityExist);
        }

        [TestMethod]
        public void DoesEntityExistTrueTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryDefault();

            // Act
            bool doesEntityExist = entitiesCrudRepository.DoesEntityExist(EntityTestValues.IdDbDefault);

            // Assert
            Assert.IsTrue(doesEntityExist);
        }

        [TestMethod]
        public void GetEntityDefaultTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryDefault();

            // Act
            IDbEntity dbEntity = entitiesCrudRepository.GetEntity(EntityTestValues.IdDbDefault);

            // Assert
            DbEntityTest.AssertDbDefault(dbEntity);
        }

        [TestMethod]
        public void GetEntityDetailDefaultTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryDefault();

            // Act
            IDbEntityDetail dbEntityDetail = entitiesCrudRepository.GetEntityDetail(EntityTestValues.IdDbDefault);

            // Assert
            DbEntityDetailTest.AssertDbDefault(dbEntityDetail);
        }

        [TestMethod]
        public void GetEntityDetailNullTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryEmpty();

            // Act
            IDbEntityDetail dbEntityDetail = entitiesCrudRepository.GetEntityDetail(EntityTestValues.IdDbDefault);

            // Assert
            Assert.IsNull(dbEntityDetail);
        }

        [TestMethod]
        public void GetEntitiesDefaultTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryDefault();

            // Act
            IDbEntity[] entities = entitiesCrudRepository.GetEntities().ToArray();

            // Assert
            Assert.AreEqual(2, entities.Length);
            DbEntityTest.AssertDbDefault(entities[0]);
            DbEntityTest.AssertDbDefault2(entities[1]);
        }

        [TestMethod]
        public void GetEntityNullTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryEmpty();

            // Act
            IDbEntity dbEntity = entitiesCrudRepository.GetEntity(EntityTestValues.IdDbDefault);

            // Assert
            Assert.IsNull(dbEntity);
        }

        [TestMethod]
        public void UpdateEntityTest()
        {
            // Arrange
            EntitiesCrudRepository entitiesCrudRepository = this.GetEntitiesCrudRepositoryDefault();

            // Act
            entitiesCrudRepository.UpdateEntity(DbEntityTest.ForUpdate());

            // Assert
            IDbEntity dbEntity = entitiesCrudRepository.GetEntity(EntityTestValues.IdDbDefault);
            DbEntityTest.AssertForUpdate(dbEntity);
        }

        private EntitiesCrudRepository GetEntitiesCrudRepositoryDefault()
        {
            Mock<ISessionContext> sessionContext = this.SetupSessionContextDefault();

            return new EntitiesCrudRepository(
                sessionContext.Object,
                InMemoryDbContext.CreatePersistenceDbContextWithDefault());
        }

        private EntitiesCrudRepository GetEntitiesCrudRepositoryEmpty()
        {
            Mock<ISessionContext> sessionContext = this.SetupSessionContextDefault();

            return new EntitiesCrudRepository(
                sessionContext.Object,
                InMemoryDbContext.CreatePersistenceDbContext());
        }

        private Mock<ISessionContext> SetupSessionContextDefault()
        {
            Mock<ISessionContext> sessionContext = new Mock<ISessionContext>(MockBehavior.Strict);
            sessionContext.Setup(sessionContext => sessionContext.RequestScopeId)
                .Returns(EntityTestValues.RequestScopeIdDbDefault);
            return sessionContext;
        }
    }
}