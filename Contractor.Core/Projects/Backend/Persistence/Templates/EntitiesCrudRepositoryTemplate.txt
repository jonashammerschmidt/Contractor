using ProjectName.Contract.Contexts;
using ProjectName.Contract.Persistence.Modules.Domain.Entities;
using ProjectName.Contract.Persistence.Tools.Pagination;
using ProjectName.Persistence.Tools.Pagination;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ProjectName.Persistence.Modules.Domain.Entities
{
    internal class EntitiesCrudRepository : IEntitiesCrudRepository
    {
        private readonly IPaginationContext paginationContext;

        private readonly PersistenceDbContext dbContext;

        public EntitiesCrudRepository(
            IPaginationContext paginationContext,
            PersistenceDbContext dbContext)
        {
            this.paginationContext = paginationContext;

            this.dbContext = dbContext;
        }

        public void CreateEntity(IDbEntity dbEntity)
        {
            this.dbContext.Entities.Add(DbEntity.ToEfEntity(dbEntity));
            this.dbContext.SaveChanges();
        }

        public void DeleteEntity(Guid entityId)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == entityId)
                .FirstOrDefault();

            this.dbContext.Entities.Remove(efEntity);
            this.dbContext.SaveChanges();
        }

        public bool DoesEntityExist(Guid entityId)
        {
            return this.dbContext.Entities.Any(efEntity => efEntity.Id == entityId);
        }

        public IDbEntity GetEntity(Guid entityId)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == entityId)
                .FirstOrDefault();

            return DbEntity.FromEfEntity(efEntity);
        }

        public IDbEntityDetail GetEntityDetail(Guid entityId)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == entityId)
                .FirstOrDefault();

            return DbEntityDetail.FromEfEntity(efEntity);
        }

        public IDbPagedResult<IDbEntity> GetEntities()
        {
            var efEntities = this.dbContext.Entities;

            return Pagination.Filter(
                efEntities,
                this.paginationContext,
                efEntity => DbEntity.FromEfEntity(efEntity));
        }

        public IEnumerable<IDbEntity> GetAllEntities()
        {
            return this.dbContext.Entities
                .Select(efEntity => DbEntity.FromEfEntity(efEntity));
        }

        public void UpdateEntity(IDbEntity dbEntity)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == dbEntity.Id)
                .FirstOrDefault();

            DbEntity.UpdateEfEntity(efEntity, dbEntity);

            this.dbContext.Entities.Update(efEntity);
            this.dbContext.SaveChanges();
        }
    }
}