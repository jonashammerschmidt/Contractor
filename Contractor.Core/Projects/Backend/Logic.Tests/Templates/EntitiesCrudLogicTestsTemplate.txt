using ProjectName.Contract.Logic.LogicResults;
using ProjectName.Contract.Logic.Modules.Domain.Entities;
using ProjectName.Contract.Logic.Tools.Identifier;
using ProjectName.Contract.Logic.Tools.Pagination;
using ProjectName.Contract.Persistence.Modules.Domain.Entities;
using ProjectName.Logic.Modules.Domain.Entities;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ProjectName.Logic.Tests.Modules.Domain.Entities
{
    [TestClass]
    public class EntitiesCrudLogicTests
    {
        [TestMethod]
        public void CreateEntityDefaultTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryEmpty();
            Mock<IGuidGenerator> guidGenerator = this.SetupGuidGeneratorDefault();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                guidGenerator.Object,
                logger);

            // Act
            ILogicResult<Guid> result = entitiesCrudLogic.CreateEntity(EntityCreateTest.ForCreate());

            // Assert
            Assert.AreEqual(LogicResultState.Ok, result.State);
            Assert.AreEqual(EntityTestValues.IdForCreate, result.Data);
            entitiesCrudRepository.Verify((repository) => repository.CreateEntity(It.IsAny<IDbEntity>()), Times.Once);
        }

        [TestMethod]
        public void DeleteEntityConflictTest()
        {
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryDeleteConflict();
            Mock<IGuidGenerator> guidGenerator = this.SetupGuidGeneratorDefault();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                guidGenerator.Object,
                logger);

            // Act
            ILogicResult result = entitiesCrudLogic.DeleteEntity(EntityTestValues.IdDefault);

            // Assert
            Assert.AreEqual(LogicResultState.Conflict, result.State);
        }

        [TestMethod]
        public void DeleteEntityDefaultTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryDefaultExists();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult result = entitiesCrudLogic.DeleteEntity(EntityTestValues.IdDefault);

            // Assert
            Assert.AreEqual(LogicResultState.Ok, result.State);
            entitiesCrudRepository.Verify((repository) => repository.DeleteEntity(EntityTestValues.IdDefault), Times.Once);
        }

        [TestMethod]
        public void DeleteEntityNotExistsTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryEmpty();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult result = entitiesCrudLogic.DeleteEntity(EntityTestValues.IdDefault);

            // Assert
            Assert.AreEqual(LogicResultState.NotFound, result.State);
            entitiesCrudRepository.Verify((repository) => repository.DeleteEntity(EntityTestValues.IdDefault), Times.Never);
        }

        [TestMethod]
        public void GetEntityDetailDefaultTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryDefaultExists();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult<IEntityDetail> result = entitiesCrudLogic.GetEntityDetail(EntityTestValues.IdDefault);

            // Assert
            Assert.AreEqual(LogicResultState.Ok, result.State);
            EntityDetailTest.AssertDefault(result.Data);
        }

        [TestMethod]
        public void GetEntityDetailNotExistsTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryEmpty();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult<IEntityDetail> result = entitiesCrudLogic.GetEntityDetail(EntityTestValues.IdDefault);

            // Assert
            Assert.AreEqual(LogicResultState.NotFound, result.State);
        }

        [TestMethod]
        public void GetEntitiesDefaultTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryDefaultExists();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult<IPagedResult<IEntity>> result = entitiesCrudLogic.GetEntities();

            // Assert
            Assert.AreEqual(LogicResultState.Ok, result.State);
            IEntity[] entityResults = result.Data.Data.ToArray();
            Assert.AreEqual(2, entityResults.Length);
            EntityTest.AssertDefault(entityResults[0]);
            EntityTest.AssertDefault2(entityResults[1]);
        }

        [TestMethod]
        public void UpdateEntityNotExistsTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryEmpty();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult result = entitiesCrudLogic.UpdateEntity(EntityUpdateTest.ForUpdate());

            // Assert
            Assert.AreEqual(LogicResultState.NotFound, result.State);
            entitiesCrudRepository.Verify((repository) => repository.UpdateEntity(DbEntityTest.Default()), Times.Never);
        }

        [TestMethod]
        public void UpdateEntityDefaultTest()
        {
            // Arrange
            Mock<IEntitiesCrudRepository> entitiesCrudRepository = this.SetupEntitiesCrudRepositoryDefaultExists();
            var logger = Mock.Of<ILogger<EntitiesCrudLogic>>();

            EntitiesCrudLogic entitiesCrudLogic = new EntitiesCrudLogic(
                entitiesCrudRepository.Object,
                null,
                logger);

            // Act
            ILogicResult result = entitiesCrudLogic.UpdateEntity(EntityUpdateTest.ForUpdate());

            // Assert
            Assert.AreEqual(LogicResultState.Ok, result.State);
            entitiesCrudRepository.Verify((repository) => repository.UpdateEntity(It.IsAny<IDbEntity>()), Times.Once);
        }

        private Mock<IEntitiesCrudRepository> SetupEntitiesCrudRepositoryDefaultExists()
        {
            var entitiesCrudRepository = new Mock<IEntitiesCrudRepository>(MockBehavior.Strict);
            entitiesCrudRepository.Setup(repository => repository.DoesEntityExist(EntityTestValues.IdDefault)).Returns(true);
            entitiesCrudRepository.Setup(repository => repository.DoesEntityExist(EntityTestValues.IdDefault2)).Returns(true);
            entitiesCrudRepository.Setup(repository => repository.GetEntity(EntityTestValues.IdDefault)).Returns(DbEntityTest.Default());
            entitiesCrudRepository.Setup(repository => repository.GetEntity(EntityTestValues.IdDefault2)).Returns(DbEntityTest.Default2());
            entitiesCrudRepository.Setup(repository => repository.GetEntityDetail(EntityTestValues.IdDefault)).Returns(DbEntityDetailTest.Default());
            entitiesCrudRepository.Setup(repository => repository.GetEntityDetail(EntityTestValues.IdDefault2)).Returns(DbEntityDetailTest.Default2());
            entitiesCrudRepository.Setup(repository => repository.GetEntities()).Returns(DbEntityTest.ForPaged());
            entitiesCrudRepository.Setup(repository => repository.UpdateEntity(It.IsAny<IDbEntity>())).Callback((IDbEntity dbEntity) =>
            {
                DbEntityTest.AssertUpdated(dbEntity);
            });
            entitiesCrudRepository.Setup(repository => repository.DeleteEntity(EntityTestValues.IdDefault));
            entitiesCrudRepository.Setup(repository => repository.DeleteEntity(EntityTestValues.IdDefault2));
            return entitiesCrudRepository;
        }

        private Mock<IEntitiesCrudRepository> SetupEntitiesCrudRepositoryEmpty()
        {
            var entitiesCrudRepository = new Mock<IEntitiesCrudRepository>(MockBehavior.Strict);
            entitiesCrudRepository.Setup(repository => repository.DoesEntityExist(EntityTestValues.IdDefault)).Returns(false);
            entitiesCrudRepository.Setup(repository => repository.DoesEntityExist(EntityTestValues.IdDefault2)).Returns(false);
            entitiesCrudRepository.Setup(repository => repository.GetEntity(EntityTestValues.IdDefault)).Returns(() => null);
            entitiesCrudRepository.Setup(repository => repository.GetEntity(EntityTestValues.IdDefault2)).Returns(() => null);
            entitiesCrudRepository.Setup(repository => repository.GetEntityDetail(EntityTestValues.IdDefault)).Returns(() => null);
            entitiesCrudRepository.Setup(repository => repository.GetEntityDetail(EntityTestValues.IdDefault2)).Returns(() => null);
            entitiesCrudRepository.Setup(repository => repository.CreateEntity(It.IsAny<IDbEntity>())).Callback((IDbEntity dbEntity) =>
            {
                DbEntityTest.AssertCreated(dbEntity);
            });
            return entitiesCrudRepository;
        }

        private Mock<IEntitiesCrudRepository> SetupEntitiesCrudRepositoryDeleteConflict()
        {
            // Arrange
            var entitiesCrudRepository = new Mock<IEntitiesCrudRepository>(MockBehavior.Strict);
            entitiesCrudRepository.Setup(repository => repository.DoesEntityExist(EntityTestValues.IdDefault)).Returns(true);
            entitiesCrudRepository.Setup(repository => repository.DoesEntityExist(EntityTestValues.IdDefault2)).Returns(true);
            entitiesCrudRepository.Setup(repository => repository.DeleteEntity(EntityTestValues.IdDefault)).Throws(new Exception());
            entitiesCrudRepository.Setup(repository => repository.DeleteEntity(EntityTestValues.IdDefault2)).Throws(new Exception());
            return entitiesCrudRepository;
        }

        private Mock<IGuidGenerator> SetupGuidGeneratorDefault()
        {
            var guidGeneration = new Mock<IGuidGenerator>(MockBehavior.Strict);
            guidGeneration.Setup(generator => generator.NewGuid()).Returns(EntityTestValues.IdForCreate);
            return guidGeneration;
        }
    }
}