using Contract.Architecture.Backend.Common.Contract.Logic;
using Contract.Architecture.Backend.Common.Contract.Persistence;
using Contract.Architecture.Backend.Common.Logic;
using Microsoft.Extensions.Logging;
using ProjectName.Contract.Logic.Modules.Domain.Entities;
using ProjectName.Contract.Persistence.Modules.Domain.Entities;
using System;

namespace ProjectName.Logic.Modules.Domain.Entities
{
    internal class EntitiesCrudLogic : IEntitiesCrudLogic
    {
        private readonly IEntitiesCrudRepository entitiesCrudRepository;

        private readonly IGuidGenerator guidGenerator;
        private readonly ILogger<EntitiesCrudLogic> logger;

        public EntitiesCrudLogic(
            IEntitiesCrudRepository entitiesCrudRepository,
            IGuidGenerator guidGenerator,
            ILogger<EntitiesCrudLogic> logger)
        {
            this.entitiesCrudRepository = entitiesCrudRepository;

            this.guidGenerator = guidGenerator;
            this.logger = logger;
        }

        public Guid CreateEntity(IEntityCreate entityCreate)
        {
            Guid newEntityId = this.guidGenerator.NewGuid();
            IDbEntity dbEntityToCreate = DbEntity.FromEntityCreate(newEntityId, entityCreate);
            this.entitiesCrudRepository.CreateEntity(dbEntityToCreate);

            this.logger.LogInformation("Entity ({id}) angelegt", newEntityId);
            return newEntityId;
        }

        public void DeleteEntity(Guid entityId)
        {
            this.entitiesCrudRepository.DeleteEntity(entityId);

            this.logger.LogInformation("Entity ({id}) gelöscht", entityId);
        }

        public IEntityDetail GetEntityDetail(Guid entityId)
        {
            IDbEntityDetail dbEntityDetail = this.entitiesCrudRepository.GetEntityDetail(entityId);
            IEntityDetail entityDetail = EntityDetail.FromDbEntityDetail(dbEntityDetail);

            this.logger.LogDebug("Details für Entity ({id}) wurde geladen", entityId);
            return entityDetail;
        }

        public IPagedResult<IEntityListItem> GetPagedEntities()
        {
            IDbPagedResult<IDbEntityListItem> dbEntitiesPagedResult =
                this.entitiesCrudRepository.GetPagedEntities();

            IPagedResult<IEntityListItem> entitiesPagedResult =
                PagedResult.FromDbPagedResult(
                    dbEntitiesPagedResult,
                    (dbEntity) => EntityListItem.FromDbEntityListItem(dbEntity));

            this.logger.LogDebug("Entities wurden geladen");
            return entitiesPagedResult;
        }

        public void UpdateEntity(IEntityUpdate entityUpdate)
        {
            IDbEntity dbEntityToUpdate = this.entitiesCrudRepository.GetEntity(entityUpdate.Id);

            this.entitiesCrudRepository.UpdateEntity(DbEntityUpdate
                .FromEntityUpdate(entityUpdate));

            this.logger.LogInformation("Entity ({id}) aktualisiert", entityUpdate.Id);
        }
    }
}