using Contract.Architecture.Backend.Common.Contract.Logic;
using Contract.Architecture.Backend.Common.Contract.Persistence;
using Contract.Architecture.Backend.Common.Logic;
using GeneratedProjectName.Modules.Domain.Entities;
using System;

namespace ProjectName.Modules.Domain.Entities
{
    public class EntitiesCrudLogic : IEntitiesCrudLogic
    {
        private readonly IEntitiesCrudRepository entitiesCrudRepository;

        private readonly IGuidGenerator guidGenerator;

        public EntitiesCrudLogic(
            IEntitiesCrudRepository entitiesCrudRepository,
            IGuidGenerator guidGenerator)
        {
            this.entitiesCrudRepository = entitiesCrudRepository;

            this.guidGenerator = guidGenerator;
        }

        public Guid CreateEntity(EntityDtoData entityData)
        {
            Guid newEntityId = this.guidGenerator.NewGuid();
            EntityDto entityToCreate = EntityDto.FromEntityDtoData(newEntityId, entityData);
            this.entitiesCrudRepository.CreateEntity(entityToCreate);

            return newEntityId;
        }

        public void DeleteEntity(Guid entityId)
        {
            this.entitiesCrudRepository.DeleteEntity(entityId);
        }

        public EntityDtoExpanded GetEntityDetail(Guid entityId)
        {
            return this.entitiesCrudRepository.GetEntityDetail(entityId);
        }

        public IDbPagedResult<EntityDtoExpanded> GetPagedEntities()
        {
            return this.entitiesCrudRepository.GetPagedEntities();
        }

        public void UpdateEntity(EntityDtoDefaultUpdate entity)
        {
            this.entitiesCrudRepository.UpdateEntity(entity);
        }
    }
}