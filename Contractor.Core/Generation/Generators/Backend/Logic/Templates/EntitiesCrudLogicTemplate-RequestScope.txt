using Contract.Architecture.Backend.Common.Contract.Logic;
using Contract.Architecture.Backend.Common.Contract.Persistence;
using Contract.Architecture.Backend.Common.Logic;
using GeneratedProjectName.Modules.Domain.Entities;
using Microsoft.Extensions.Logging;
using ProjectName.Contexts;
using System;

namespace ProjectName.Modules.Domain.Entities
{
    internal class EntitiesCrudLogic : IEntitiesCrudLogic
    {
        private readonly IEntitiesCrudRepository entitiesCrudRepository;

        private readonly IGuidGenerator guidGenerator;
        private readonly ISessionContext sessionContext;
        private readonly ILogger<EntitiesCrudLogic> logger;

        public EntitiesCrudLogic(
            IEntitiesCrudRepository entitiesCrudRepository,
            IGuidGenerator guidGenerator,
            ISessionContext sessionContext,
            ILogger<EntitiesCrudLogic> logger)
        {
            this.entitiesCrudRepository = entitiesCrudRepository;

            this.guidGenerator = guidGenerator;
            this.sessionContext = sessionContext;
            this.logger = logger;
        }

        public Guid CreateEntity(EntityDtoData entityDtoData)
        {
            Guid newEntityId = this.guidGenerator.NewGuid();
            EntityDto entityToCreate = EntityDto.FromEntityDtoData(newEntityId, this.sessionContext.RequestScopeId, entityDtoData);
            this.entitiesCrudRepository.CreateEntity(entityToCreate);

            this.logger.LogInformation("Entity ({id}) angelegt", newEntityId);
            return newEntityId;
        }

        public void DeleteEntity(Guid entityId)
        {
            this.entitiesCrudRepository.DeleteEntity(entityId);

            this.logger.LogInformation("Entity ({id}) gelöscht", entityId);
        }

        public EntityDtoExpanded GetEntityDetail(Guid entityId)
        {
            EntityDtoExpanded entityDtoExpanded = this.entitiesCrudRepository.GetEntityDetail(entityId);

            this.logger.LogDebug("Details für Entity ({id}) wurde geladen", entityId);
            return entityDtoExpanded;
        }

        public IDbPagedResult<EntityDtoExpanded> GetPagedEntities()
        {
            IDbPagedResult<EntityDtoExpanded> entitiesPagedResult =
                this.entitiesCrudRepository.GetPagedEntities();

            this.logger.LogDebug("Entities wurden geladen");
            return entitiesPagedResult;
        }

        public void UpdateEntity(EntityDtoDefaultUpdate entityDto)
        {
            this.entitiesCrudRepository.UpdateEntity(entityDto);

            this.logger.LogInformation("Entity ({id}) aktualisiert", entityDto.Id);
        }
    }
}