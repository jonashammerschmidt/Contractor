using Contract.Architecture.Backend.Common.API;
using Contract.Architecture.Backend.Common.Contract.Persistence;
using GeneratedProjectName.Modules.Domain.Entities;
using ProjectName.Security.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System;

namespace ProjectName.Modules.Domain.Entities
{
    [ApiController]
    [Route("domain-kebab/entities-kebab")]
    public class EntitiesCrudController : ControllerBase
    {
        private readonly IEntitiesCrudLogic entitiesCrudLogic;

        public EntitiesCrudController(IEntitiesCrudLogic entitiesCrudLogic)
        {
            this.entitiesCrudLogic = entitiesCrudLogic;
        }

        [HttpGet]
        [Authorized]
        [SwaggerOperation(Summary = "Get EntitiesReadable with Pagination", Tags = new[] { "Domain" })]
        [Pagination(FilterFields = new[] { "DisplayProperty" }, SortFields = new[] { "DisplayProperty" })]
        public ActionResult<IDbPagedResult<EntityDtoExpanded>> GetPagedEntities()
        {
            return this.Ok(this.entitiesCrudLogic.GetPagedEntities());
        }

        [HttpGet]
        [Authorized]
        [Route("{entityId}")]
        [SwaggerOperation(Summary = "Get EntityReadable by Id", Tags = new[] { "Domain" })]
        public ActionResult<EntityDtoExpanded> GetEntityDetail(Guid entityId)
        {
            return this.Ok(this.entitiesCrudLogic.GetEntityDetail(entityId));
        }

        [HttpPost]
        [Authorized]
        [SwaggerOperation(Summary = "Create EntityReadable", Tags = new[] { "Domain" })]
        public ActionResult<DataBody<Guid>> CreateEntity([FromBody] EntityDtoData entity)
        {
            return this.Ok(new DataBody<Guid>(this.entitiesCrudLogic.CreateEntity(entity)));
        }

        [HttpPut]
        [Authorized]
        [SwaggerOperation(Summary = "Update EntityReadable", Tags = new[] { "Domain" })]
        public ActionResult UpdateEntity([FromBody] EntityDtoDefaultUpdate entity)
        {
            this.entitiesCrudLogic.UpdateEntity(entity);
            return this.Ok();
        }

        [HttpDelete]
        [Authorized]
        [Route("{entityId}")]
        [SwaggerOperation(Summary = "Delete EntityReadable by Id", Tags = new[] { "Domain" })]
        public ActionResult DeleteEntity(Guid entityId)
        {
            this.entitiesCrudLogic.DeleteEntity(entityId);
            return this.Ok();
        }
    }
}