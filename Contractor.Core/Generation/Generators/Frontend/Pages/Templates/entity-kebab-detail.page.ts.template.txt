import { Component, OnInit } from '@angular/core';
import { UntypedFormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { FormController } from '@krz/material';
import { ConfirmationDialogService } from '@core-app/components/ui/confirmation-dialog/confirmation-dialog.service';
import { EntitiesCrudService } from '@core-app/model/domain-kebab/entities-kebab/entities-kebab-crud.service';
import { IEntityDtoExpanded } from '@generated-app/dtos/domain-kebab/entities-kebab/dtos/i-entity-kebab-dto-expanded';
import { AppEventService } from '@core-app/services/event/app-event.service';

export interface EntityDetailPageForm {
  id: string;
}

@Component({
  selector: 'app-entity-kebab-detail',
  templateUrl: './entity-kebab-detail.page.html',
  styleUrls: ['./entity-kebab-detail.page.scss']
})
export class EntityDetailPage implements OnInit {

  entityId: string;
  entity: IEntityDtoExpanded;

  formController: FormController<EntityDetailPageForm>;

  constructor(
    private entitiesCrudService: EntitiesCrudService,
    private confirmationDialogService: ConfirmationDialogService,
    private appEventService: AppEventService,
    private formBuilder: UntypedFormBuilder,
    private activatedRoute: ActivatedRoute,
    private router: Router) {
  }

  async ngOnInit(): Promise<void> {
    this.initializeDataSources();
    this.setupFormController();

    this.activatedRoute.params.subscribe((params) => {
      if (params.id) {
        this.entityId = params.id;
        this.loadEntity().then().catch((error) => {
          console.error(error);
        });
      }
    });
  }

  initializeDataSources() {
  }

  setupFormController() {
    this.formController = new FormController(this.formBuilder, {
      id: {
      },
    });
  }

  async onSaveClicked(): Promise<void> {
    this.formController.formGroup.markAllAsTouched();
    if (!this.formController.formGroup.valid) {
      return;
    }

    const entityUpdate = this.formController.formGroup.getRawValue();
    await this.entitiesCrudService.updateEntity(entityUpdate);
    this.appEventService.newSuccess("EntityReadable wurde gespeichert.");
  }

  async onDeleteClicked(): Promise<void> {
    if (await this.confirmationDialogService.askForConfirmation('Wollen Sie wirklich EntityReadable \'' + this.entity.displayProperty + '\' l√∂schen?')) {
      await this.entitiesCrudService.deleteEntity(this.entity.id);
      await this.router.navigate(['/domain-kebab/entities-kebab']);
    }
  }

  private async loadEntity(): Promise<void> {
    this.entity = null;
    this.entity = await this.entitiesCrudService.getEntityDetail(this.entityId);

    this.formController.formGroup.patchValue(this.entity);
    this.formController.setupRegistrations();
  }

}
