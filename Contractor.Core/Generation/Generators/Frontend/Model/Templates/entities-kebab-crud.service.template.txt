import { Injectable } from '@angular/core';
import { BackendCoreService } from '@core-app/services/backend/backend-core.service';
import { IPagedResult } from '@core-app/services/backend/pagination/i-paged-result';
import { IPaginationOptions, toPaginationParams } from '@core-app/services/backend/pagination/i-pagination-options';
import { IEntityDto } from '@generated-app/model/domain-kebab/entities-kebab/dtos/i-entity-kebab-dto';
import { IEntityDtoData } from '@generated-app/model/domain-kebab/entities-kebab/dtos/i-entity-kebab-dto-data';
import { IEntityDtoExpanded } from '@generated-app/model/domain-kebab/entities-kebab/dtos/i-entity-kebab-dto-expanded';

@Injectable()
export class EntitiesCrudService {

    constructor(private backendCoreService: BackendCoreService) { }

    public async getPagedEntities(paginationOptions: IPaginationOptions): Promise<IPagedResult<IEntityDtoExpanded>> {
        const url = '/domain-kebab/entities-kebab?' + toPaginationParams(paginationOptions);
        return await this.backendCoreService.get<IPagedResult<IEntityDtoExpanded>>(url);
    }

    public async getEntityDetail(entityId: string): Promise<IEntityDtoExpanded> {
        return await this.backendCoreService.get<IEntityDtoExpanded>('/domain-kebab/entities-kebab/' + entityId);
    }

    public async createEntity(entity: IEntityDtoData): Promise<string> {
        const options = {
            body: entity
        };

        const result = await this.backendCoreService.post<{ data: string }>('/domain-kebab/entities-kebab', options);

        const newEntityId = result.data;
        return newEntityId;
    }

    public async updateEntity(entityUpdate: IEntityDto): Promise<void> {
        const options = {
            body: entityUpdate
        };

        await this.backendCoreService.put('/domain-kebab/entities-kebab', options);
    }

    public async deleteEntity(entityId: string): Promise<void> {
        await this.backendCoreService.delete('/domain-kebab/entities-kebab/' + entityId);
    }

}
