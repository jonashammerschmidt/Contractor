using Contract.Architecture.Backend.Common;
using Contract.Architecture.Backend.Common.Contract;
using Contract.Architecture.Backend.Common.Contract.Persistence;
using Contract.Architecture.Backend.Common.Persistence;
using DbProjectName.Generated.DbContext;
using DbProjectName.Generated.DbContext.Modules.Domain.Entities;
using System;
using System.Linq;

namespace GeneratedProjectName.Modules.Domain.Entities
{
    public class EntitiesReadRepositoryDefault : IEntitiesReadRepositoryDefault
    {
        protected readonly IPaginationContext paginationContext;

        protected readonly DbContextNameRaw dbContext;

        public EntitiesReadRepositoryDefault(
            IPaginationContext paginationContext,
            DbContextNameRaw dbContext)
        {
            this.paginationContext = paginationContext;

            this.dbContext = dbContext;
        }

        public EntityDto GetEntity(Guid entityId)
        {
            EfEntityDto efEntityDto = dbContext.Entities
                .Where(efEntityDto => efEntityDto.Id == entityId)
                .SingleOrDefault();

            if (efEntityDto == null)
            {
                throw new NotFoundResultException("Entity ({id}) konnte nicht gefunden werden.", entityId);
            }

            return EntityDto.FromEfEntityDto(efEntityDto);
        }

        public EntityDtoExpanded GetEntityDetail(Guid entityId)
        {
            EfEntityDto efEntityDto = this.dbContext.Entities
                .Where(efEntityDto => efEntityDto.Id == entityId)
                .SingleOrDefault();

            if (efEntityDto == null)
            {
                throw new NotFoundResultException("Entity ({id}) konnte nicht gefunden werden.", entityId);
            }

            return EntityDtoExpanded.FromEfEntityDto(efEntityDto);
        }

        public IDbPagedResult<EntityDtoExpanded> GetPagedEntities()
        {
            var efEntities = this.dbContext.Entities;

            return Pagination.Execute(
                efEntities,
                this.paginationContext,
                efEntityDto => EntityDtoExpanded.FromEfEntityDto(efEntityDto));
        }
    }
}