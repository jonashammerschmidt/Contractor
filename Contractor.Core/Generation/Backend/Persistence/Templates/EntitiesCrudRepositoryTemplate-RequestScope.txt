using Contract.Architecture.Backend.Common;
using Contract.Architecture.Backend.Common.Contract;
using Contract.Architecture.Backend.Common.Contract.Persistence;
using Contract.Architecture.Backend.Common.Persistence;
using ProjectName.Contract.Contexts;
using ProjectName.Contract.Persistence.Modules.Domain.Entities;
using DbProjectName.Persistence.DbContext;
using DbProjectName.Persistence.DbContext.Modules.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ProjectName.Persistence.Modules.Domain.Entities
{
    internal class EntitiesCrudRepository : IEntitiesCrudRepository
    {
        private readonly ISessionContext sessionContext;
        private readonly IPaginationContext paginationContext;

        private readonly DbContextName dbContext;

        public EntitiesCrudRepository(
            ISessionContext sessionContext,
            IPaginationContext paginationContext,
            DbContextName dbContext)
        {
            this.sessionContext = sessionContext;
            this.paginationContext = paginationContext;

            this.dbContext = dbContext;
        }

        public void CreateEntity(IDbEntity dbEntity)
        {
            EfEntity efEntity = DbEntity.ToEfEntity(dbEntity, this.sessionContext.RequestScopeId);

            this.dbContext.Entities.Add(efEntity);
            this.dbContext.SaveChanges();
        }

        public void DeleteEntity(Guid entityId)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == entityId)
                .SingleOrDefault();

            if (efEntity == null)
            {
                throw new NotFoundResultException("EntityReadable ({id}) konnte nicht gefunden werden.", entityId);
            }

            this.dbContext.Entities.Remove(efEntity);
            this.dbContext.SaveChanges();
        }

        public IDbEntity GetEntity(Guid entityId)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == entityId)
                .SingleOrDefault();

            if (efEntity == null)
            {
                throw new NotFoundResultException("EntityReadable ({id}) konnte nicht gefunden werden.", entityId);
            }

            return DbEntity.FromEfEntity(efEntity);
        }

        public IDbEntityDetail GetEntityDetail(Guid entityId)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == entityId)
                .SingleOrDefault();

            if (efEntity == null)
            {
                throw new NotFoundResultException("EntityReadable ({id}) konnte nicht gefunden werden.", entityId);
            }

            return DbEntityDetail.FromEfEntity(efEntity);
        }

        public IDbPagedResult<IDbEntityListItem> GetPagedEntities()
        {
            var efEntities = this.dbContext.Entities;

            return Pagination.Execute(
                efEntities,
                this.paginationContext,
                efEntity => DbEntityListItem.FromEfEntity(efEntity));
        }

        public void UpdateEntity(IDbEntityUpdate dbEntityUpdate)
        {
            EfEntity efEntity = this.dbContext.Entities
                .Where(efEntity => efEntity.Id == dbEntityUpdate.Id)
                .SingleOrDefault();

            if (efEntity == null)
            {
                throw new NotFoundResultException("EntityReadable ({id}) konnte nicht gefunden werden.", dbEntityUpdate.Id);
            }

            DbEntity.UpdateEfEntity(efEntity, dbEntityUpdate);

            this.dbContext.SaveChanges();
        }
    }
}